// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id
  username         String?
  password         String?
  fullName         String?
  email            String         @unique
  roles            Roles
  refreshToken     String?
  managerId        String?
  projectsAssigned String[]
  projects         UserProjects[]
  reporterDev      Ticket[]       @relation("assigneeDeveloper")
  assignedDev      Ticket[]       @relation("reportingDeveloper")

  Ticket  Ticket[]
  Project Project[]
}

enum Roles {
  EMPLOYEE
  MANAGER
  ADMIN
}

model Project {
  id          String         @id
  title       String
  description String
  tickets     Ticket[]
  developers  UserProjects[]
  manager     User           @relation(fields: [managerId], references: [id])
  managerId   String
}

model UserProjects {
  id        String @id @default(uuid())
  userId    String
  projectId String

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Ticket {
  id                 String  @id
  title              String
  priority           String
  project            Project @relation(fields: [projectId], references: [id])
  projectId          String
  description        String
  status             String
  assigneeDeveloper  User    @relation("assigneeDeveloper", fields: [assignee], references: [id])
  assignee           String
  reportingDeveloper User    @relation("reportingDeveloper", fields: [reporter], references: [id])
  reporter           String
  issueType          String
  User               User?   @relation(fields: [userId], references: [id])
  userId             String?
}
